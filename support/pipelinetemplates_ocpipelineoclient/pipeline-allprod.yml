apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  annotations:
    openshift.io/generated-by: OpenShiftNewApp
    pipeline.alpha.openshift.io/uses: '[{"name": "allprod-pipeline",  "kind": "DeploymentConfig"}]'
  creationTimestamp: '2018-02-07T17:44:11Z'
  labels:
    app: pipeline-allprod
    name: allprod-pipeline
    template: pipeline-allprod
  name: allprod-pipeline
  namespace: fisdemocicd
  resourceVersion: '382955931'
  selfLink: >-
    /apis/build.openshift.io/v1/namespaces/fisdemocicd/buildconfigs/allprod-pipeline
  uid: 815147a1-0c2e-11e8-8448-52540064f8a5
spec:
  failedBuildsHistoryLimit: 5
  nodeSelector: null
  output: {}
  postCommit: {}
  resources: {}
  runPolicy: Serial
  source:
    type: None
  strategy:
    jenkinsPipelineStrategy:
      jenkinsfile: |-
        pipeline {
            agent none
            stages {
                stage ('moveNewToStable') {
                    steps {
                        script {
                            openshift.withCluster() {
                                openshift.withProject('fisdemoprod') {
                                    
                                    openshift.tag("fisdemoprod/fisgateway-service-new:latest", "fisdemoprod/fisgateway-service-stable:latest")
                                    
                                    def deploymentConfig = openshift.selector("dc", "fisgateway-service-stable")
                                    
                                    def rm = deploymentConfig.rollout()
                                    
                                    //Rollout latest deployment
                                    rm.latest()
                                    
                                    //Check Rollout status - blocks and waits for rollout to complete
                                    rm.status()
                                }
                            }
                        }
                    }
                }
                
                stage ('UpdateRouteToStable') {
                    steps {
                        script {
                            def stableroute = [
                                "apiVersion": "v1",
                                "kind": "Route",
                                "metadata": [
                                    "labels": [
                                        'component': 'fisgateway-service-stable',
                                        'group': 'quickstarts',
                                        'project': 'fisgateway-service-stable',
                                        'provider': 's2i',
                                        'template': 'fisgateway-service',
                                        'version': '1.0.0'
                                    ],
                                    "name": "fisgateway-service",
                                    "namespace": "fisdemoprod",
                                    "annotations" : [
                                        'haproxy.router.openshift.io/balance': 'roundrobin'
                                        ],
                                    ],
                                "spec": [
                                    "host": "fisgateway-service-fisdemoprod.apps.demolab.local",
                                    "to": [
                                        "kind": "Service",
                                        "name": "fisgateway-service-stable",
                                    ],
                                ]
                            ]
                            openshift.withCluster() {
                                openshift.withProject('fisdemoprod') {
                                        
                                    echo "Deleting existing route"
                                    
                                    openshift.selector("route", "fisgateway-service").delete()
                                    
                                    echo "Creating Route"
                                    def objs = openshift.create(stableroute)
                                        
                                    
                                }   
                            }
                        }
                    }
                }
                stage ('StopNewServices') {
                    steps {
                        script {
                            openshift.withCluster() {
                                openshift.withProject('fisdemoprod') {
                                    
                                    // stop the new deployment pods until next time!
                                    openshift.selector("dc", "fisgateway-service-new").scale("--replicas=0")
                                        
                                    
                                }   
                            }
                        }
                    }
                } 
            }
        }

        /*node('maven') { 
          env.threescaleurl = "https://fusedemo-admin.3scale.net";
          env.apiaccesstoken = "143d1a90ea5d369a88ec35310f06b86fec8569a1c34c21eaffc9f9906947962a";    
          env.appplanid = "2357355899471";
          env.metricsid = "2555418019263";
          env.normallimit = 50;
          
          env.newnamespace = "fisdemoprod";
          env.stablenamespace = "fisdemoprod";
          
          stage('moveNewToStable') { 
            print 'Move new image stream to stable image stream' 
            openshiftTag(namespace: "${env.newnamespace}", sourceStream: "fisgateway-service",  sourceTag: "latest", destinationnamespace: "${env.stablenamespace}", destinationStream: "fisgateway-service-stable", destinationTag: "latest")
          }
          
          stage('UpdateRouteToStable') {
            print 'deleteroute' 
            openshiftDeleteResourceByKey keys: "fisgateway-service", namespace: "${env.stablenamespace}", types: "route", verbose: "true"
            
            print 'Update Route to only point to stable service' 
            openshiftCreateResource jsonyaml: "{    'apiVersion': 'v1',    'kind': 'Route',    'metadata': {        'labels': {            'component': 'fisgateway-service-stable',            'group': 'quickstarts',            'project': 'fisgateway-service-stable',            'provider': 's2i',            'template': 'fisgateway-service',            'version': '1.0.0'        },        'name': 'fisgateway-service',        'namespace': '${env.stablenamespace}'    },    'spec': {        'host': 'fisgateway-service-${env.stablenamespace}.192.168.64.2.nip.io',        'to': {            'kind': 'Service',            'name': 'fisgateway-service-stable',            'weight': 100        },        'wildcardPolicy': 'None'    }}", namespace: "${env.stablenamespace}", verbose: "false"
          } 
          
          stage('StopNewServices') {
            print 'Stop all new service pod' 
            openshiftScale depCfg: "fisgateway-service-new", namespace: "${env.newnamespace}", replicaCount: "0", verifyReplicaCount: "true", verbose: "true"
          }
          
          stage('GetCurrentLimitId') { 
            print 'Get Current Limit Id'
            env.LIMIT_ID = sh (
              script: "curl --silent -X GET \"${env.threescaleurl}/admin/api/application_plans/${env.appplanid}/metrics/${env.metricsid}/limits.xml?access_token=${env.apiaccesstoken}\" --stderr - | sed -e 's,.*<id>\\([^<]*\\)</id>.*,\\1,g' ", 
              returnStdout: true
            ).trim()
            echo env.LIMIT_ID
          }
          
          stage('UpdateLimitToAllProd') { 
            print 'Update 3scale Limit back to normal'
            sh  "echo Updating Id ${env.LIMIT_ID} to less request ${env.normallimit} per min because of AB Testing"
            sh  "curl -s -o /dev/null -w \"%{http_code}\\n\" -X PUT  \"${env.threescaleurl}/admin/api/application_plans/${env.appplanid}/metrics/${env.metricsid}/limits/${env.LIMIT_ID}.xml\" -d \'access_token=${env.apiaccesstoken}&period=minute&value=${env.normallimit}\'"  
          }
        } */
    type: JenkinsPipeline
  successfulBuildsHistoryLimit: 5
  triggers:
    - github:
        secret: secret101
      type: GitHub
    - generic:
        secret: secret101
      type: Generic
status:
  lastVersion: 26
