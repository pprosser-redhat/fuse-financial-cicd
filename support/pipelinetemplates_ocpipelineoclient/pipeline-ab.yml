apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  annotations:
    openshift.io/generated-by: OpenShiftNewApp
    pipeline.alpha.openshift.io/uses: '[{"name": "ab-pipeline",  "kind": "DeploymentConfig"}]'
  creationTimestamp: '2018-02-12T16:32:26Z'
  labels:
    app: pipeline-ab
    name: ab-pipeline
    template: pipeline-ab
  name: ab-pipeline
  namespace: fisdemocicd
  resourceVersion: '382955645'
  selfLink: /apis/build.openshift.io/v1/namespaces/fisdemocicd/buildconfigs/ab-pipeline
  uid: 4fbcdbe4-1012-11e8-91ce-52540064f8a5
spec:
  failedBuildsHistoryLimit: 5
  nodeSelector: null
  output: {}
  postCommit: {}
  resources: {}
  runPolicy: Serial
  source:
    type: None
  strategy:
    jenkinsPipelineStrategy:
      jenkinsfile: |+
        pipeline {
            agent none
                stages {
                    stage('moveToProd'){
                        steps {
                            script{
                                openshift.withCluster() {
                                    //openshift.verbose()
                                    openshift.withProject('fisdemoprod') {
                                        
                                        
                                        // Make UAT version of the image available for AB testing
                                        openshift.tag("fisdemo/fisgateway-service:uatready", "fisdemoprod/fisgateway-service-new:latest")
                                        
                                        // Rollout lastest version
                                       // openshift.selector("dc", "fisgateway-service-new").rollout().latest()
                                        
                                        // Scale temp new version ready for AB testing
                                        openshift.selector("dc", "fisgateway-service-new").scale("--replicas=1")
                                        
                                        //Wait for pod  to become ready
                                        openshift.selector("dc", "fisgateway-service-new").related('pods').untilEach(1) {
                                          return (it.object().status.phase == "Running")
                                        }
                                        
                                       openshift.verbose(false)
                                    }
                                }
                            }
                        }
                    }
                    stage('createABRoute') {
                        steps {
                            script {
                                def abroute = [
                                "apiVersion": "v1",
                                "kind": "Route",
                                "metadata": [
                                    "labels": [
                                        'component': 'fisgateway-service-stable',
                                        'group': 'quickstarts',
                                        'project': 'fisgateway-service-stable',
                                        'provider': 's2i',
                                        'template': 'fisgateway-service',
                                        'version': '1.0.0'
                                    ],
                                    "name": "fisgateway-service",
                                    "namespace": "fisdemoprod",
                                    "annotations" : [
                                        'haproxy.router.openshift.io/balance': 'roundrobin'
                                        ],
                                    ],
                                "spec": [
                                    "alternateBackends": [[
                                        "kind": "Service",
                                        "name": "fisgateway-service-new",
                                        "weight": 30
                                    ]],
                                    "host": "fisgateway-service-fisdemoprod.apps.demolab.local",
                                    "to": [
                                        "kind": "Service",
                                        "name": "fisgateway-service-stable",
                                        "weight": 70
                                    ],
                                ]
                            ]
                            
                            openshift.withCluster() {
                                openshift.withProject('fisdemoprod') {
                                    
                                    echo "Deleting existing route"
                                    
                                    openshift.selector("route", "fisgateway-service").delete()
                                    
                                    echo "Creating Route"
                                    def objs = openshift.create(abroute)
                                }
                                
                            }
                        }
                    }
                    // To do, update 3Scale using the 3Scale API
                }
            }
        }

        /*
          stage('moveToProd'){
            echo "UAT at ${env.uatnamespace} and PROD at ${env.prodnamespace}"
            openshiftTag alias: "false",  destStream: "fisgateway-service", destTag: "latest", destinationNamespace: "${env.prodnamespace}", namespace: "${env.uatnamespace}", srcStream: "fisgateway-service-uat", srcTag: "uatready", verbose: "true"
          }
          
          stage('StartNewServices') {
            print 'Start new service with one pod running' 
            openshiftScale depCfg: "fisgateway-service-new", namespace: "${env.prodnamespace}", replicaCount: "1", verifyReplicaCount: "true", verbose: "true"
          }
          
          stage('UpdateRouteToAB') { 
            print 'deleteroute' 
            openshiftDeleteResourceByKey keys: "fisgateway-service", namespace: "${env.prodnamespace}", types: "route", verbose: "true"
            
            print 'Update Route to only point to both new and stable service' 
            openshiftCreateResource jsonyaml: "{    'apiVersion': 'v1',    'kind': 'Route',    'metadata': {        'labels': {            'component': 'fisgateway-service-stable',            'group': 'quickstarts',            'project': 'fisgateway-service-stable',            'provider': 's2i',            'template': 'fisgateway-service',            'version': '1.0.0'        },        'name': 'fisgateway-service',        'namespace': '${env.prodnamespace}'    },    'spec': {        'alternateBackends': [            {                'kind': 'Service',                'name': 'fisgateway-service-new',                'weight': 30            }        ],        'host': 'fisgateway-service-temp.apps.mkt2go.com',        'to': {            'kind': 'Service',            'name': 'fisgateway-service-stable',            'weight': 70        },        'wildcardPolicy': 'None'    }}", namespace: "temp", verbose: "false"
          }
          
          stage('GetCurrentLimitId') { 
            print 'Get Current Limit Id'
            env.LIMIT_ID = sh (
              script: "curl --silent -X GET \"${env.threescaleurl}/admin/api/application_plans/${env.appplanid}/metrics/${env.metricsid}/limits.xml?access_token=${env.apiaccesstoken}\" --stderr - | sed -e 's,.*<id>\\([^<]*\\)</id>.*,\\1,g' ", 
              returnStdout: true
            ).trim()
            echo env.LIMIT_ID
          }
          
          stage('UpdateLimitToAB') { 
            print 'Update 3scale Limit back to AB Testing mode'  
            sh  "echo Updating Id ${env.LIMIT_ID} to less request ${env.ablimit} per min because of AB Testing"
            sh  "curl -s -o /dev/null -w \"%{http_code}\\n\" -X PUT  \"${env.threescaleurl}/admin/api/application_plans/${env.appplanid}/metrics/${env.metricsid}/limits/${env.LIMIT_ID}.xml\" -d \'access_token=${env.apiaccesstoken}&period=minute&value=${env.ablimit}\'"  
          }
        }
        */


    type: JenkinsPipeline
  successfulBuildsHistoryLimit: 5
  triggers:
    - github:
        secret: secret101
      type: GitHub
    - generic:
        secret: secret101
      type: Generic
status:
  lastVersion: 123